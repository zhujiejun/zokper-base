/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.zhujiejun.zokper;

import org.apache.zookeeper.CreateMode;
import org.apache.zookeeper.ZooDefs;
import org.apache.zookeeper.ZooKeeper;
import org.apache.zookeeper.data.Stat;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertNotNull;

public class AppTest {
    @Test
    public void testAppHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull("app should have a greeting", classUnderTest.getGreeting());
    }

    private static final String connectString = "node101:2181,node102:2181,node103:2181";
    private static final int sessionTimeout = 2000;
    private ZooKeeper zkClient = null;

    /*@Before
    public void init() throws IOException {
        zkClient = new ZooKeeper(connectString, sessionTimeout, (event) -> {
            // 收到事件通知后的回调函数（用户的业务逻辑）
            System.out.println(event.getType() + "-----###-----" + event.getPath());
            // 再次启动监听
            try {
                zkClient.getChildren("/", true);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    // 创建子节点
    @Test
    public void create() throws Exception {
        // 参数1：节点路径； 参数2：节点数据 ； 参数3：节点权限 ；参数4：节点类型
        zkClient.create("/atguigu", "jinlian".getBytes(),
                ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
    }

    // 获取子节点
    @Test
    public void getChildren() throws Exception {
        zkClient.getChildren("/sanguo", true).forEach(System.out::println);
        // 延时阻塞
        Thread.sleep(Long.MAX_VALUE);
    }

    // 判断 znode 是否存在
    @Test
    public void exist() throws Exception {
        Stat stat = zkClient.exists("/eclipse", false);
        System.out.println(stat == null ? "not exist" : "exist");
    }*/

    /*@After
    public void close() throws InterruptedException {
        System.out.println("------close zk client------");
        zkClient.close();
    }*/
}
